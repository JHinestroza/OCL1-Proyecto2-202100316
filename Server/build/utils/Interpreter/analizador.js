/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,10],$V3=[5,13,14,19,22],$V4=[1,25],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,33],$Vj=[1,34],$Vk=[8,21,30,31,32,33,34,38,39,40,41,42,43],$Vl=[2,12],$Vm=[8,21,30,31,32,33,34,38,39,40,41],$Vn=[8,21,30,38,39,40,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"PTCOMA":8,"DECLARACION":9,"IFINS":10,"IMPRIMIBLE":11,"EXPRESION":12,"PRINT":13,"DECLARE":14,"ID":15,"DATATYPES":16,"DEFAULT":17,"SIMPLEIF":18,"IF":19,"comparacion":20,"THEN":21,"END":22,"logica":23,"operaciones":24,"ENTERO":25,"DECIMAL":26,"APOSTROFE":27,"CADENA_COMILLA":28,"PARIZQ":29,"PARDER":30,"MAYOR":31,"MENOR":32,"MAYORIGUAL":33,"MENORIGUAL":34,"INT":35,"VARCHAR":36,"DOUBLE":37,"MAS":38,"MENOS":39,"POR":40,"DIVIDIDO":41,"OR":42,"AND":43,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",13:"PRINT",14:"DECLARE",15:"ID",17:"DEFAULT",19:"IF",21:"THEN",22:"END",25:"ENTERO",26:"DECIMAL",27:"APOSTROFE",28:"CADENA_COMILLA",29:"PARIZQ",30:"PARDER",31:"MAYOR",32:"MENOR",33:"MAYORIGUAL",34:"MENORIGUAL",35:"INT",36:"VARCHAR",37:"DOUBLE",38:"MAS",39:"MENOS",40:"POR",41:"DIVIDIDO",42:"OR",43:"AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[11,1],[7,2],[9,5],[10,1],[18,6],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,3],[12,1],[20,3],[20,3],[20,3],[20,3],[16,1],[16,1],[16,1],[24,3],[24,3],[24,3],[24,3],[23,3],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
            returnInstruction: $$[$0-1].returnInstruction, 
           // nodeInstruction: (new Nodo("INIT")).generateProduction([$$[$0-1]//.nodeInstruction, 'EOF'])            
        };
    
break;
case 2:
        
        this.$={
            returnInstruction: [...$$[$0-1].returnInstruction, $$[$0].returnInstruction], 
           // nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0-1]//.nodeInstruction,  $$[$0]//.nodeInstruction]) 
        };
    
break;
case 3:

        this.$={
            returnInstruction: [$$[$0].returnInstruction],
           // nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0]//.nodeInstruction])
        };
    
break;
case 4: case 5:

        this.$={
            returnInstruction: $$[$0-1].returnInstruction, 
           // nodeInstruction: (new Nodo("INSTRUCCION")).generateProduction([$$[$0-1]//.nodeInstruction]) 
        };
    
break;
case 6:

        this.$={
            returnInstruction: $$[$0].returnInstruction, 
            //nodeInstruction: (new Nodo("INSTRUCCION")).generateProduction([$$[$0].nodeInstruction]) 
        };
    
break;
case 7:

        this.$ = {
            returnInstruction: $$[$0].returnInstruction,
           // nodeInstruction: (new Nodo('IMPRIMIBLE')).generateProduction([$$[$0]//.nodeInstruction])
        }
    
break;
case 8:

		//console.log('pase en imprimir  '+$$[$0])
        this.$= {
            returnInstruction: new impresion.default($$[$0].returnInstruction,_$[$0-1].first_line,_$[$0-1].first_column),
           // nodeInstruction: (new Nodo('IMPRIMIR')).generateProduction([$$[$0-1], $$[$0], $$[$01]//.nodeInstruction, $$[$02]])
        }
    
break;
case 9:

			//console.log("declare una varible "+$$[$0])
        this.$={
            returnInstruction: new declaracion.default($$[$0-3], $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            //nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4].nodeInstruction, 'identificador', 'igual', $$[$0-1].nodeInstruction])
        }
    
break;
case 10:

        this.$ = {
            returnInstruction: $$[$0].returnInstruction,
            //nodeInstruction: (new Nodo('IFINS')).generateProduction([$$[$0].nodeInstruction])
        }
    
break;
case 11:

		console.log("he entrado aqui A UN IF" + $$[$0-2]);
        this.$={
                returnInstruction: new ifIns.default($$[$0-4],$$[$0-2], undefined, undefined, _$[$0-5].first_line, _$[$0-5].first_column),
        //     //nodeInstruction: (new Nodo('SIMPLEIF')).generateProduction([$$[$0-5], $$[$0-4], $$[$0-3].nodeInstruction, $$[$0-2], $$[$0-1], $$[$0].nodeInstruction, $$[$01]])
        }
    
break;
case 12: case 13: case 14:

			this.$ = {
				returnInstruction: $$[$0].returnInstruction,
			// nodeInstruction: (new Nodo('IMPRIMIBLE')).generateProduction([$$[$0]//.nodeInstruction])
			}
		
break;
case 15:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CADENA'])
        }
    
break;
case 16:

		//console.log('SOY UNA DECIMAL ' +$$[$0])
        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL),$$[$0], _$[$0].first_line, _$[$0].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CADENA'])
        }
    
break;
case 17: case 18:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column),
           // nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CADENA'])
        }
    
break;
case 19:

        this.$ = {
            returnInstruction: $$[$0-1].returnInstruction,
           // nodeInstruction: (new Nodo('IMPRIMIBLE')).generateProduction([$$[$0-2]//.nodeInstruction])
        }
    
break;
case 20:

        this.$ = {
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.ID),$$[$0], _$[$0].first_line, _$[$0].first_column),
           // nodeInstruction: (new Nodo('IMPRIMIBLE')).generateProduction([$$[$0]//.nodeInstruction])
        }
    
break;
case 21:

        this.$ = {
            returnInstruction: new relacional.default(relacional.tipoOp.MAYOR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
        }
    
break;
case 22:

        this.$ = {
            returnInstruction: new relacional.default(relacional.tipoOp.MENOR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
        }
    
break;
case 23:

        this.$ = {
            returnInstruction: new relacional.default(relacional.tipoOp.MAYOR_IGUAL, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
        }
    
break;
case 24:

        this.$ = {
            returnInstruction: new relacional.default(relacional.tipoOp.MENOR_IGUAL, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
        }
    
break;
case 25: case 27:

		//console.log("ENTERO")
        this.$={
            returnInstruction: new Tipo.default(Tipo.DataType.DECIMAL),
            //nodeInstruction: (new Nodo('DATATYPES')).generateProduction([$$[$0]])
        }
    
break;
case 26:

		//console.log("ENTERO")
        this.$={
            returnInstruction: new Tipo.default(Tipo.DataType.CADENA),
            //nodeInstruction: (new Nodo('DATATYPES')).generateProduction([$$[$0]])
        }
    
break;
case 28:

            //console.log("esta ese la suma: "+$$[$0-2]+" + "+$$[$0])
        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.SUMA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'SUMA', $$[$0].nodeInstruction])
        }
    
break;
case 29:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.RESTA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MENOS', $$[$0].nodeInstruction])
        }
    
break;
case 30:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MENOS', $$[$0].nodeInstruction])
        }
    
break;
case 31:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.DIVISION, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            //nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MENOS', $$[$0].nodeInstruction])
        }
    
break;
case 32:

            this.$ = {
                returnInstruction: new logica.default(logica.tipoOp.OR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
                //nodeInstruction: (new Nodo('EXPRESION_LOGICA')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
            }
        
break;
case 33:

            this.$ = {
                returnInstruction: new logica.default(logica.tipoOp.AND, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
                //nodeInstruction: (new Nodo('EXPRESION_LOGICA')).generateProduction([$$[$0-2].nodeInstruction, $$[$0-1], $$[$0].nodeInstruction])
            }
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,13:$V0,14:$V1,18:9,19:$V2},{1:[3]},{5:[1,11],6:12,7:4,9:5,10:6,13:$V0,14:$V1,18:9,19:$V2},o($V3,[2,3]),{8:[1,13]},{8:[1,14]},o($V3,[2,6]),{11:15,12:16,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{15:[1,26]},o($V3,[2,10]),{12:28,15:$V4,20:27,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{1:[2,1]},o($V3,[2,2]),o($V3,[2,4]),o($V3,[2,5]),{8:[2,8]},o([8,30],[2,7],{31:$Va,32:$Vb,33:$Vc,34:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj}),o($Vk,$Vl),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),{11:39,12:16,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},o($Vk,[2,20]),{16:40,35:[1,41],36:[1,42],37:[1,43]},o([31,32,33,34,38,39,40,41,42,43],$Vl,{21:[1,44]}),{31:$Va,32:$Vb,33:$Vc,34:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj},{12:45,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:46,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:47,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:48,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:49,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:50,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:51,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:52,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:53,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{12:54,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{30:[1,55]},{17:[1,56]},{17:[2,25]},{17:[2,26]},{17:[2,27]},{4:57,6:3,7:4,9:5,10:6,13:$V0,14:$V1,18:9,19:$V2},o($Vm,[2,21],{42:$Vi,43:$Vj}),o($Vm,[2,22],{42:$Vi,43:$Vj}),o($Vm,[2,23],{42:$Vi,43:$Vj}),o($Vm,[2,24],{42:$Vi,43:$Vj}),o($Vk,[2,32]),o($Vk,[2,33]),o($Vn,[2,28],{31:$Va,32:$Vb,33:$Vc,34:$Vd,42:$Vi,43:$Vj}),o($Vn,[2,29],{31:$Va,32:$Vb,33:$Vc,34:$Vd,42:$Vi,43:$Vj}),o($Vn,[2,30],{31:$Va,32:$Vb,33:$Vc,34:$Vd,42:$Vi,43:$Vj}),o($Vn,[2,31],{31:$Va,32:$Vb,33:$Vc,34:$Vd,42:$Vi,43:$Vj}),o($Vk,[2,19]),{12:58,15:$V4,20:17,23:18,24:19,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{6:12,7:4,9:5,10:6,13:$V0,14:$V1,18:9,19:$V2,22:[1,59]},{8:[2,9],31:$Va,32:$Vb,33:$Vc,34:$Vd,38:$Ve,39:$Vf,40:$Vg,41:$Vh,42:$Vi,43:$Vj},{8:[1,60]},o($V3,[2,11])],
defaultActions: {11:[2,1],15:[2,8],41:[2,25],42:[2,26],43:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //codigo js
    // const controller = require('../../../controller/parser/parser');
    // const errores = require('./Exceptions/Error');
    // const nativo = require('./Expresions/Native');
     const aritmetico = require('./Arbol/Expresions/Aritmetica');
   	 const relacional = require('./Arbol/Expresions/Relacional');
     const logica = require('./Arbol/Expresions/Logica');
     const Tipo = require('./Arbol/Symbol/Type');
    // const impresion = require('./Instructions/Imprimir');   
    // const procedureExec = require('./Instructions/ProcedureExec');
     const ifIns = require('./Arbol/Instructions/IfIns');  
    // const procedureDec = require('./Instructions/ProcedureDec');
     const declaracion = require('./Arbol/Instructions/Declaracion');
    // const mientras = require('./Instructions/Mientras');
     const asignacion = require('./Arbol/Instructions/Asignacion');
    // const { Nodo } = require('./Symbol/Three');
	 const impresion = require('./Arbol/Instructions/Imprimir'); 
	 const nativo = require('./Arbol/Expresions/Native');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 19;
break;
case 6:return 21;
break;
case 7:return 'BEGIN';
break;
case 8:return 22;
break;
case 9:return 13;
break;
case 10:return 14
break;
case 11:return 43
break;
case 12:return 42
break;
case 13:return 'NOT'
break;
case 14:return 'LOOP'
break;
case 15:return 'AVG'
break;
case 16:return 17
break;
case 17:return 35
break;
case 18:return 37
break;
case 19:return 'FLOAT'
break;
case 20:return 'RESDATE'
break;
case 21:return 36
break;
case 22:return 'BOOLEAN'
break;
case 23:return 'TRUE'
break;
case 24:return 'FALSE'
break;
case 25:return 'NULL'
break;
case 26:return 'WHILE'
break;
case 27:return 'ELSE'
break;
case 28:return 'FOR'
break;
case 29:return 'BREAK'
break;
case 30:return 'CONTINUE'
break;
case 31:return 'SET'
break;
case 32:return 'WHEN'
break;
case 33:return 'CASE'
break;
case 34:return 'AS'
break;
case 35:return 'SELECT'
break;
case 36:return 'FROM'
break;
case 37:return 'UPDATE'
break;
case 38:return 'TRUNCATE'
break;
case 39:return 'CAST'
break;
case 40:return 'FUNCTION'
break;
case 41:return 'RETURNS'
break;
case 42:return 'RETURN'
break;
case 43:return 'PROCEDURE'
break;
case 44:return 'LOWER'
break;
case 45:return 'UPPER'
break;
case 46:return 'ROUND'
break;
case 47:return 'LEN'
break;
case 48:return 'TYPEOF'
break;
case 49:return 'ADD'
break;
case 50:return 'LOOP'
break;
case 51:return 'AVG'
break;
case 52:return 'IN'
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2);return 27; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 28;
break;
case 55:return 26;
break;
case 56:return 25;
break;
case 57:return 15
break;
case 58:return 'ID2'
break;
case 59:return 'REVALUAR';
break;
case 60:return 8;
break;
case 61:return 29;
break;
case 62:return 30;
break;
case 63:return 'CORIZQ';
break;
case 64:return 'CORDER';
break;
case 65:return 'COMMA';
break;
case 66:return 38;
break;
case 67:return 39;
break;
case 68:return 40;
break;
case 69:return 41;
break;
case 70:return 'IGUAL';
break;
case 71:return 'DIFERENTE'
break;
case 72:return 34
break;
case 73:return 33
break;
case 74:return 31
break;
case 75:return 32
break;
case 76:return 'NEGACION'
break;
case 77:return 'PUNTOS'
break;
case 78:return 5;
break;
case 79:return 'INVALID'
break;
}
},
rules: [/^(?:[\ \r\t\f\t]+)/i,/^(?:\n)/i,/^(?:--([^\r\n]*)?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:IF\b)/i,/^(?:THEN\b)/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:PRINT\b)/i,/^(?:DECLARE\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:LOOP\b)/i,/^(?:AVG\b)/i,/^(?:DEFAULT\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:FLOAT\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:WHILE\b)/i,/^(?:ELSE\b)/i,/^(?:FOR\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:SET\b)/i,/^(?:WHEN\b)/i,/^(?:CASE\b)/i,/^(?:AS\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:CAST\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURNS\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TYPEOF\b)/i,/^(?:ADD\b)/i,/^(?:LOOP\b)/i,/^(?:AVG\b)/i,/^(?:IN\b)/i,/^(?:[\"][^\"\n]+[\"])/i,/^(?:[\'][^\"\n]+[\'])/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:[@][a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:Evaluar\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:\.\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}